<?xml version="1.0" encoding="utf-8"?>
<topic id="61ad1ece-8094-44a9-a558-ec664a1ab16a" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
      	<para>
      		At the start of the strategy you may need to load the previously matched orders and trades (for example, when the algorithm has been restarted during
      		the trading session or orders and trades transferred through the night). To do this:
      	</para>
	  <list class="ordered">
		<listItem>
		  To find those orders to be downloaded into the strategy, and to return them back from the method (for example, to download orders identifiers, if the strategy
		  records every registration through the <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>
		  method from the file).
		</listItem>
		<listItem>
		  To combine the result with the base method <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>.
		</listItem>
		<listItem>
		  Once orders are loaded in the strategy, all of their matched trades will be also loaded. This will be done automatically.
		</listItem>
	  </list>
	  
	  <para>
		  The following example shows the loading of all trades in the strategy:
	  </para>
    </introduction>
    
    <procedure>
      <title>Loading in the strategy previously matched orders and trades</title>

      <steps class="ordered">
        <step>
          <content>
            <para>To load the previous state of the <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>, you must override 
            <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>.
		  	All <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.IConnector.Orders</codeEntityReference>
		  	and <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.IConnector.StopOrders</codeEntityReference> will be received by this method from
		  	the <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.Strategy.OnStarted</codeEntityReference>.
		  	And you should to filter them:</para>
		  	<code language="C#"><![CDATA[private bool _isOrdersLoaded;
private bool _isStopOrdersLoaded;
		  	
protected override IEnumerable<Order> ProcessNewOrders(IEnumerable<Order> newOrders, bool isStopOrders)
{
	// check if the orders was already loaded
	if ((!isStopOrders && _isOrdersLoaded) || (isStopOrders && _isStopOrdersLoaded))
		return base.ProcessNewOrders(newOrders, isStopOrders);

	return Filter(newOrders);
}]]></code>
          </content>
        </step>
        <step>
        	<content>
        		<para>
        			To implement orders filtering, you must determine the filter criterion. For example, if to save all registered during the strategy work orders in
        			the file, you can create the filter by the transaction number <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.TransactionId</codeEntityReference>.
        			If such number is in the file, so the order was registered through this strategy:
        		</para>
        		<code language="C#"><![CDATA[private IEnumerable<Order> Filter(IEnumerable<Order> orders)
{
	// to get the identifiers from text file
	var transactions = File.ReadAllLines("orders_{0}.txt".Put(Name)).Select(l => l.To<long>()).ToArray();
	
	// finding our orders
	return orders.Where(o => transactions.Contains(o.TransactionId));
}]]></code>
        	</content>
        </step>
        <step>
        	<content>
        		<para>
        			A record of orders transaction numbers registering through the strategy can be accomplished by overriding the 
        			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> method:
        		</para>
        		<code language="C#"><![CDATA[protected override void RegisterOrder(Order order)
{
	// registering the order
	base.RegisterOrder(order);
	
	// and saving order's transaction id
	File.AppendAllLines("orders_{0}.txt".Put(Name), new[]{ order.TransactionId.ToString() });
}]]></code>
        	</content>
        </step>
        <step>
        	<content>
        		<para>
        			Once orders are loaded in the strategy, all of their matched trades will be also loaded. This will be done automatically.
        		</para>
        	</content>
        </step>
      </steps>
    </procedure>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>

    <nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>