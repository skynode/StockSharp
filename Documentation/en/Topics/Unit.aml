<?xml version="1.0" encoding="utf-8"?>
<topic id="a8486498-a2d8-4924-b009-8b93138b268a" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			To simplify works with arithmetic operations on such values as percent, points or pips, the
			<codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> data type can be used. It allows transparently operate with operations of addition,
			subtraction, multiplication and division. <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> may be converted into 
			<codeEntityReference>T:System.Decimal</codeEntityReference> (not possible, of the value is percentage, i.e. the 
			type <codeEntityReference qualifyHint="true">P:StockSharp.Messages.Unit.Type</codeEntityReference> is set to 
			<codeEntityReference qualifyHint="true">F:StockSharp.Messages.UnitTypes.Percent</codeEntityReference>) and vice versa (in this case the created value is
			always of the absolute value, i.e. the <codeEntityReference qualifyHint="true">P:StockSharp.Messages.Unit.Type</codeEntityReference> is set to
			<codeEntityReference qualifyHint="true">F:StockSharp.Messages.UnitTypes.Absolute</codeEntityReference>).
		</para>
    </introduction>

    <!--<prerequisites>
      <content>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Usage of Unit</title>

      <steps class="bullet">
		  <step>
			  <content>
				  <para>
					  The <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> can be created using special design kits, or using shorter recording by
					  <codeEntityReference>T:StockSharp.Messages.UnitHelper</codeEntityReference>:
				  </para>
				  <code language="C#">// test instrument with pips = 1 cent and points = 10 usd
var security = new Security
{
	Id = "AAPL@NASDAQ",
	StepPrice = 10,
	PriceStep = 0.01m,
};
			
var absolute = new Unit(30);
var percent = 30.0.Percents();
var pips = 30.0.Pips(security);
var point = 30.0.Points(security);</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> features formatted output. Therefore, reducing the values to a string
					  depending on the <codeEntityReference>T:StockSharp.Messages.UnitTypes</codeEntityReference> type:
				  </para>
				  <code language="C#">Console.WriteLine("absolute = " + absolute);
Console.WriteLine("percent = " + percent);
Console.WriteLine("pips = " + pips);
Console.WriteLine("point = " + point);</code>
				  <para>will output the following strings:</para>
				  <code>absolute = 30
percent = 30%
pips = 30s
point = 30p</code>
				  <para>The s symbol means minimal price increment (pips), p - cost of price increment (point).</para>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  Arithmetic operations with <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> are performed in the same way, as with normal
					  numbers:
				  </para>
				  <code language="C#">// addition of all values
Console.WriteLine("testValue + absolute = " + (testValue + absolute));
Console.WriteLine("testValue + percent = " + (testValue + percent));
Console.WriteLine("testValue + pips = " + (testValue + pips));
Console.WriteLine("testValue + point = " + (testValue + point));
Console.WriteLine();

// multiplication of all values
Console.WriteLine("testValue * absolute = " + (testValue * absolute));
Console.WriteLine("testValue * percent = " + (testValue * percent));
Console.WriteLine("testValue * pips = " + (testValue * pips));
Console.WriteLine("testValue * point = " + (testValue * point));
Console.WriteLine();

// subtraction of values
Console.WriteLine("testValue - absolute = " + (testValue - absolute));
Console.WriteLine("testValue - percent = " + (testValue - percent));
Console.WriteLine("testValue - pips = " + (testValue - pips));
Console.WriteLine("testValue - point = " + (testValue - point));
Console.WriteLine();

// division of all values
Console.WriteLine("testValue / absolute = " + (testValue / absolute));
Console.WriteLine("testValue / percent = " + (testValue / percent));
Console.WriteLine("testValue / pips = " + (testValue / pips));
Console.WriteLine("testValue / point = " + (testValue / point));
Console.WriteLine();</code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  The result of arithmetic operations <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference> itself becomes 
					  <codeEntityReference>T:StockSharp.Messages.Unit</codeEntityReference>, type of each is equal to the first operand type. For example, when adding
					  pips and points, the result will be in pips:
				  </para>
				  <code language="C#">// addition of pips and points
var resultPipsPoint = pips + point;
// and casting to decimal
var resultPipsPointDecimal = (decimal)resultPipsPoint;

Console.WriteLine("pips + point = " + resultPipsPoint);
Console.WriteLine("(decimal)(pips + point) = " + resultPipsPointDecimal);</code>
				  <para>Output of such operation will be as follows:</para>
				  <code>pips + point = 30030s
(decimal)(pips + point) = 300.3</code>
				  <para>
					  Or, when adding pips and percent:
				  </para>
				  <code language="C#">// addition of pips and percents
var resultPipsPercents = pips + percent;
// and casting to decimal
var resultPipsPercentsDecimal = (decimal)resultPipsPercents;

Console.WriteLine("pips + percent = " + resultPipsPercents);
Console.WriteLine("(decimal)(pips + percent) = " + resultPipsPercentsDecimal);</code>
				  <para>The output will be as follows:</para>
				  <code>pips + percent = 39s
(decimal)(pips + percent) = 0.39</code>
			  </content>
		  </step>
      </steps>
    </procedure>
   

    <nextSteps>
      <content>
        <para>
			<link xlink:href="aca28ee6-5c0c-47ee-a7e6-fe295e001be7">Currency converter</link>
		</para>
      </content>
    </nextSteps>
    
    
  </developerWalkthroughDocument>
</topic>