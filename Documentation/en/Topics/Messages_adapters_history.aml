<?xml version="1.0" encoding="utf-8"?>
<topic id="15357338-1d0d-4a6d-ae70-8118be08ecc7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>В случае запроса истории, в адаптер приходит подписка, с инициализированными значениями <codeEntityReference qualifyHint="true">P:StockSharp.Messages.MarketDataMessage.From</codeEntityReference> и 
      <codeEntityReference qualifyHint="true">P:StockSharp.Messages.MarketDataMessage.To</codeEntityReference>. Адаптер должен обработать полученный запрос, вернув запрашиваемые данные.
      Признаком окончания запроса служит отправка сообщения <codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference>. Таким образом, внешний код понимает, что все запрошенные данные были получены.
      Если данных нет (подключение не поддерживает историю или же запрашиваемый период недоступен), то так же требуется результирующее значение <codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference>.
      </para>
      <para>Некоторые сообщения, реализующие <codeEntityReference>T:StockSharp.Messages.ISubscriptionMessage</codeEntityReference> (например, <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference>), имеют всегда инициализированными <codeEntityReference qualifyHint="true">P:StockSharp.Messages.ISubscriptionMessage.From</codeEntityReference> и <codeEntityReference qualifyHint="true">P:StockSharp.Messages.ISubscriptionMessage.To</codeEntityReference>.
      Для таких сообщение подписка на online данные невозможна, и по ним отправляются только исторические данные (или же идет запрос мета-данных, как инструменты, площадки и т.д.).
      </para>
      <para>При обработке результатов истории, у исторические сообщений необходимо инициализировать свойство <codeEntityReference qualifyHint="true">P:StockSharp.Messages.IOriginalTransactionIdMessage.OriginalTransactionId</codeEntityReference>. Таким образом внешний код поймет, что возвращаемые адаптером данные относятся к конкретной исторический подписке:</para>
      <code language="C#"><![CDATA[
      		SendOutMessage(new TimeFrameCandleMessage
			{
				OpenPrice = (decimal)candle.Open,
				ClosePrice = (decimal)candle.Close,
				HighPrice = (decimal)candle.High,
				LowPrice = (decimal)candle.Low,
				TotalVolume = (decimal)candle.AssetVolume,
				OpenTime = candle.StartTime,
				State = candle.IsFormed ? CandleStates.Finished : CandleStates.Active,
				TotalTicks = candle.TradesCount,
				OriginalTransactionId = _candleTransactions.TryGetValue(Tuple.Create(secId, tf)), // <- заполняем идентификато подписки, по которому внешний код определит, какой инструмент и тайм-фрейм был в подписке
			});
      ]]></code>
      <para>Специальные адаптер <codeEntityReference>T:StockSharp.Algo.PartialDownloadMessageAdapter</codeEntityReference> дробит подписки с большим диапазоном данных (подробнее <link xlink:href="a90787cb-3566-4d09-835c-22a0838196fa" />) на множество запросов с мелкими диапазонами. Каждый адаптер может передать, какой диапазон времени максимально он поддерживает через перегрузку метода <codeEntityReference qualifyHint="true">M:StockSharp.Messages.IMessageAdapter.GetHistoryStepSize(StockSharp.Messages.DataType,System.TimeSpan@)</codeEntityReference>:</para>
      <code language="C#"><![CDATA[
public partial class MyOwnMessageAdapter : MessageAdapter
{
	// ...
	
	/// <inheritdoc />
	public override TimeSpan GetHistoryStepSize(DataType dataType, out TimeSpan iterationInterval)
	{
		var step = base.GetHistoryStepSize(dataType, out iterationInterval);
			
		if (dataType == DataType.Ticks) // тиковые данные максимально поддерживает диапазон в один день
			step = TimeSpan.FromDays(1);

		return step;
	}
}
]]></code>
      <para>В случае online данных заполнение <codeEntityReference qualifyHint="true">P:StockSharp.Messages.IOriginalTransactionIdMessage.OriginalTransactionId</codeEntityReference> не требуется, так как адаптер <codeEntityReference>T:StockSharp.Algo.SubscriptionOnlineMessageAdapter</codeEntityReference> передает в адаптер только одну подписку с online данными.</para>
    </introduction>
  </developerConceptualDocument>
</topic>