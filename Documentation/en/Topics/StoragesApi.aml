<?xml version="1.0" encoding="utf-8"?>
<topic id="e4a57b52-bd14-4640-a7c7-0979dba1ad0a" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para>All processes of the data saving and recovery in the <token>stocksharp</token> run through a special API, located in the <codeEntityReference>N:StockSharp.Algo.Storages</codeEntityReference> section.
		There is the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>,
		interface in this section, which created to describe all the possible actions with the storage and contains such properties as
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Storages.IEntityRegistry.Securities</codeEntityReference>,
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Storages.IEntityRegistry.Positions</codeEntityReference>
		etc. Through these properties, it is possible to get all the previously saved trading objects, for example, instruments. All processes run as with regular
		collection using the <codeEntityReference>T:StockSharp.Algo.Storages.IStorageEntityList`1</codeEntityReference> interface. If you want to save the trading object
		in the storage (for example, a new order appeared or previously registered order updated), you should use the
		<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)</codeEntityReference> method.</para>
         
		<para>The default implementation of the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>
		interface is the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> class.
		It interacts with the data through a low-level system interface <codeEntityReference>T:Ecng.Serialization.IStorage</codeEntityReference>. 
		This interface provides a transparent work with <link xlink:href="38595e78-cff6-44ed-b525-2be13e6c17e4">databases</link>, hiding details.</para>
		  
		<para>The work with market data, such as tick trades or order books, takes place through the certain interface
		<codeEntityReference>T:StockSharp.Algo.Storages.IMarketDataStorage`1</codeEntityReference>, which is obtained based on the information about the instrument through
		<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>
		mathod. <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>
		for tick trades or order books accordingly.</para>
		  
		<para>If the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> used, the implementation of methods with
		market data does not depend on <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive</codeEntityReference>,
		since the data is always stored in the file. This is the internal format of the <token>stocksharp</token>, and it is organized in such a way that the trades or
		order books takes a minimum of disk space. The path to the directory where the market data will be stored (or read) indicated by the
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path</codeEntityReference> property of the
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive</codeEntityReference> storage.</para>
		
		<para>The folders with the names equal <link xlink:href="34a9c518-60ca-45c0-a118-5e2e42165efa">instruments identifiers</link> (separate folder for each
		instrument) will be created at this path.</para>
				
		<para>Subfolders, indicating the date of the market data will be created inside each of these folders. For example, if you save the tick trades for a period of
		3 days, then three separate folders with dates will be created. The format of the folder name is always fixed as yyyy_MM_dd.</para>
		
		<para>Files with the bin extension are inside each folder with dates. Trades are stored in the <legacyBold>trades.bin</legacyBold> file, order books in the <legacyBold>quotes.bin</legacyBold> file.
		Also the <legacyItalic>candles_XXX.bin</legacyItalic> files may be present, which store various types of <link xlink:href="cd52cfcf-938c-4fce-9a56-4e9a001f0792">candles</link>
		(filename indicates the type and parameter of candles) and the <legacyItalic>orderLog.bin</legacyItalic> files where the order log stored.</para>
		
	</introduction>

	<procedure>
		<title>Example of working with market data storage</title>

		<steps class="ordered">
			<step>
				<content>
					<para>The SampleStorage example, located in the <token>stocksharp</token> installation package, shows how to save and load the trades through the
					<codeEntityReference>T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference>class. In the beginning an instrument created and its basic
					properties  are initialized - <codeEntityReference>P:StockSharp.BusinessEntities.Security.Id</codeEntityReference>
					(to determine location on disk), <codeEntityReference>P:StockSharp.BusinessEntities.Security.StepPrice</codeEntityReference>
					and
					<codeEntityReference>P:StockSharp.BusinessEntities.Security.Decimals</codeEntityReference>
					(for decimal value compression in the <legacyBold>trades.bin</legacyBold> file):</para>
					
					<code language="C#">
					<![CDATA[
var security = new Security
{
	Id = "TestId",
	MinStepSize = 0.1,
	Decimals = 1,
};
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>Further, as initial data, a list of the 1,000 undefined trades created (in a real application, it will be those trades that are get from
					external sources or trade application):</para>
					
					<code language="C#">
					<![CDATA[
var trades = new List<Trade>();

// generating 1000 random ticks
//

var tradeGenerator = new RandomWalkTradeGenerator(security, 99)
{
	IdGenerator = new IdGenerator
	{
		Current = DateTime.Now.Ticks
	}
};

// generator initialization
tradeGenerator.Init();

for (var i = 0; i < 1000; i++)
{
	var t = tradeGenerator.Generate(DateTime.Today + TimeSpan.FromMinutes(i));
	t.Id = i + 1;
	trades.Add(t);
}
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>The <codeEntityReference>T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> itself created on the next step:</para>
				  
					<code language="C#">
					<![CDATA[
var storage = new StorageRegistry();
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>The market data storage obtained via the trade objects store. The tick trades storage, which is obtained via the
					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>
					method, used in example:</para>
				  
					<code language="C#">
					<![CDATA[
var tradeStorage = storage.GetTradeStorage(security);
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>The saving of trades:</para>
				  
					<code language="C#">
					<![CDATA[
tradeStorage.Save(trades);
					]]>
					</code>
				</content>
			</step>
		  
			<step>
				<content>
					<para>The loading of trades, which were saved in the previous step:</para>
				  
					<code language="C#">
					<![CDATA[
var loadedTrades = tradeStorage.Load(DateTime.Today, DateTime.Today + TimeSpan.FromMinutes(1000));
 	  
foreach (var trade in loadedTrades)
{
	Console.WriteLine("Tick № {0}: {1}", trade.Id, trade);
}
					]]>
					</code>
				</content>
			</step>
		  
			<step>
				<content>
					<para>Since the trades are stored in the file, the next time you run the sample, they will be present there, and you will get 2000 trades instead
					of 1000. For correct work of example, it is necessary to remove the trades at the end of the work:</para>
				  
					<code language="C#">
					<![CDATA[
tradeStorage.Delete(DateTime.Today, DateTime.Today + TimeSpan.FromMinutes(1000));
					]]>
					</code>
				</content>
			</step>
			
		</steps>
	</procedure>
  
	</developerWalkthroughDocument>
</topic>