<?xml version="1.0" encoding="utf-8"?>
<topic id="eeaa9b57-9108-4cbb-a9c1-e135eee35ae5" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
		<para>
			The <token>stocksharp</token> provides a reports generating mechanism for strategies created on the basis of <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>.
			The report includes the instrument code
			(<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Security</codeEntityReference>),
			the total working time (<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.TotalWorkingTime</codeEntityReference>),
			slippage (<codeEntityReference>P:StockSharp.Algo.Connector.SlippageManager</codeEntityReference>),
			P&amp;L (<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.PnLManager</codeEntityReference>) etc.
			Also, reports generation includes detailed statistics by all the orders (<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Orders</codeEntityReference>)
			and trades (<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.MyTrades</codeEntityReference>), which have been registered during the strategy work.
		</para>
		<para>
			The reports framework is based on the <codeEntityReference>T:StockSharp.Algo.Strategies.Reporting.StrategyReport</codeEntityReference> class that normally has the following implementations:
		</para>
		<list class="bullet">
			<listItem>
				<para>
					<codeEntityReference>T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport</codeEntityReference> - report generation in the <token>excel</token> format. 
					With this generation, you can use the template file (<codeEntityReference>P:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport.Template</codeEntityReference>)
					which already contains the necessary formulas and charts based on the generated data. Data from the template before generating copied to the output file whose
					name is passed through the constructor.
				</para>
				<para>
					By default, the <codeEntityReference>T:StockSharp.Algo.Strategies.Reporting.ExcelStrategyReport</codeEntityReference> uses an <token>excel</token>
					worksheet called "report", where it records the data. If such a sheet in the template file is not present, it will be automatically created.
				</para>
			</listItem>
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Strategies.Reporting.XmlStrategyReport</codeEntityReference> - report generation in the <token>xml</token> format.
				This format is useful when you need to pass strategy parameters from trading algorithm to another program.
			</listItem>
			<listItem>
				<codeEntityReference>T:StockSharp.Algo.Strategies.Reporting.CsvStrategyReport</codeEntityReference> - report generation in the <token>csv</token> format.
				A simplified version of the <token>excel</token> report, supported by a large number of third-party programs.
			</listItem>
		</list>
    </introduction>

    <prerequisites>
      <content>
        <para>
			<link xlink:href="8c0327db-494a-4fe0-aba8-0d4b93dea60e">Event model</link>
		</para>
      </content>
    </prerequisites>
    
    <!-- One or more procedure or section elements -->

    <procedure>
      <title>Excel report generation adding to the SampleSMA</title>

      <steps class="ordered">
        <step>
          <content>
			  <para>You need to add the report generate button on the form:</para>
			  <code><![CDATA[<Button x:Name="Report" Grid.Column="0" Width="100" Grid.ColumnSpan="2" Grid.Row="11" IsEnabled="False" Content="Report" Click="Report_Click" />]]></code>
          </content>
        </step>
		  <step>
			  <content>
				  <para>The generation code (starts by pressing a button):</para>
				  <code><![CDATA[private void Report_Click(object sender, RoutedEventArgs e)
{
	new ExcelStrategyReport(_strategy, "sma.xlsx").Generate();

	// oppening the result file
	Process.Start("sma.xlsx");
}]]></code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  As a result, the generated file will be located in the same folder as the SampleSMA.exe
				  </para>
			  </content>
		  </step>
      </steps>
    </procedure>
    
    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <nextSteps>
      <content>
        <para><link xlink:href="82437493-cd53-41eb-b756-d913af0f4f8e">Logging</link></para>
      </content>
    </nextSteps>
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>