<?xml version="1.0" encoding="utf-8"?>
<topic id="fa060718-1aaa-43a4-9c37-4f57476f1932" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    	<para>В случае транслирование внешней торговой системой полных стаканов (стакан присылается целиком при каждом изменении), необходимо отправлять его ввиде сообщения:</para>
    	<code language="C#"><![CDATA[// получаем стакана от торговой системы
private void SessionOnOrderBook(string pair, OrderBook book)
{
		SendOutMessage(new QuoteChangeMessage
		{
			SecurityId = pair.ToStockSharp(),
			Bids = book.Bids.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(),
			Asks = book.Asks.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(),
			ServerTime = book.Time,
		});
}]]></code>
      <para>В случае транслирование внешней торговой системой инкрементальных стаканов (транслируются только изменения ценовых уровне, а не весь стакан целиком), в адаптере
      необходимо прописать логику как построения снэпшота стакана (если он не транслируется), так и отдачи изменений стакана. Для этого необходимо использовать свойство
      <codeEntityReference qualifyHint="true">P:StockSharp.Messages.QuoteChangeMessage.State</codeEntityReference>:</para>
      <code language="C#"><![CDATA[// получаем снэпшот стакана от торговой системы
private void SessionOnOrderBookSnapshot(string pair, OrderBook book)
{
		SendOutMessage(new QuoteChangeMessage
		{
			SecurityId = pair.ToStockSharp(),
			Bids = book.Bids.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(),
			Asks = book.Asks.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(),
			ServerTime = book.Time,
			State = QuoteChangeStates.SnapshotComplete, // <- указываем, что текущее сообщение является снэпшотом,
			// и необходимо сбросить состояние стакана новым снимком
		});
}]]></code>
		<para>Для отправки инкрементальных сообщений код аналогичен, но устанавливается признак изменения стакана. Если у котировки
		<codeEntityReference qualifyHint="true">P:StockSharp.Messages.QuoteChange.Volume</codeEntityReference> значение равно 0, то это является признаком для удаления
		ценового уровня:</para>
		<code language="C#"><![CDATA[// получаем изменения стакана стакана
private void SessionOnOrderBookIncrement(string pair, OrderBook book)
{
		SendOutMessage(new QuoteChangeMessage
		{
			SecurityId = pair.ToStockSharp(),
			Bids = book.Bids.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(), // <- с нулевым объемом котировки интепретируются как удаляемые
			Asks = book.Asks.Select(e => new QuoteChange(e.Price, e.Size)).ToArray(),
			ServerTime = book.Time,
			State = QuoteChangeStates.Increment, // <- указываем, что текущее сообщение является инкрементальным
		});
}]]></code>
	<para>Последним шагом является переопределение свойства <codeEntityReference qualifyHint="true">P:StockSharp.Messages.IMessageAdapter.IsSupportOrderBookIncrements</codeEntityReference>,
	которое укажет, что в цепочке адаптеров необходимо при подключении добавить
	<codeEntityReference>T:StockSharp.Algo.OrderBookIncrementMessageAdapter</codeEntityReference> (подробнее <link xlink:href="a90787cb-3566-4d09-835c-22a0838196fa" />) :</para>
		<code language="C#"><![CDATA[
public partial class MyOwnMessageAdapter : MessageAdapter
{
	// ...
	
	/// <inheritdoc />
	public override bool IsSupportOrderBookIncrements => true;
}
]]></code>
    </introduction>
  </developerConceptualDocument>
</topic>