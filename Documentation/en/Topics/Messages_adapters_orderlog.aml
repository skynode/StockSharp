<?xml version="1.0" encoding="utf-8"?>
<topic id="42dcf014-53df-4962-a907-59ce2f165507" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Если подключение поддерживает лог заявок, то адаптер может передавать его через сообщение <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference>:</para>
       	<code language="C#"><![CDATA[
			SendOutMessage(new ExecutionMessage
			{
				ExecutionType = ExecutionTypes.OrderLog, // <- устанавливаем признак того, что сообщение содержил ОЛ
				ServerTime = order.TradeTime,
				SecurityId = order.Symbol.ToStockSharp(section),
				Side = order.Side.ToSide(),
				OrderPrice = (decimal)order.Price,
				OrderType = order.Type.ToOrderType(out var postOnly, out _),
				OrderState = order.Status.ToOrderState(),
				OrderVolume = order.Quantity,
				Balance = (decimal?)(order.Quantity - order.AccumFilled),
				TimeInForce = order.Tif.ToTimeInForce(out var postOnly2),
				AveragePrice = (decimal?)order.AveragePrice,
			});
]]></code>
		<para>Если требуется поддержка генерации стаканов из приходящих данных, то будет использоваться адаптер <codeEntityReference>T:StockSharp.Algo.OrderLogMessageAdapter</codeEntityReference> (подробнее <link xlink:href="a90787cb-3566-4d09-835c-22a0838196fa" />) при подписке, требущих сбор стаканов из ОЛ данных.
		По умолчанию, будет использовать алгоритм <codeEntityReference>T:StockSharp.Messages.OrderLogMarketDepthBuilder</codeEntityReference>. Если поведение данного класса недостаточно, то необходимо создать собственный класс, реализующий интерфейс
		<codeEntityReference>T:StockSharp.Messages.IOrderLogMarketDepthBuilder</codeEntityReference> и переопределить метод <codeEntityReference qualifyHint="true">M:StockSharp.Messages.IMessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)</codeEntityReference>:</para>
		<code language="C#"><![CDATA[
public partial class MyOwnMessageAdapter : MessageAdapter
{
	// ...
	
	/// <inheritdoc />
	public IOrderLogMarketDepthBuilder CreateOrderLogMarketDepthBuilder(SecurityId securityId) => new MyOwnOrderLogMarketDepthBuilder();
}
]]></code>
    </introduction>
  </developerConceptualDocument>
</topic>