<?xml version="1.0" encoding="utf-8"?>
<topic id="9d636fda-309e-4d5f-a6ed-4848fb8f4f0b" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">   
    <introduction>
<para>Для создания собственной стратегии следует создать папку для своей стратегии в папке Strategies.</para>
<mediaLink><image placement="center" xlink:href="Shell_custom_strategy_00"/></mediaLink>
<para>Воспользовавшись примером стратегии SmaStrategy необходимо создать саму стратегию.</para>
<para>Если для стратегии необходимо добавить собственную панель тестирования или мониторинга, то 
стратегия должна реализовать интерфейсы IHaveTestControl и IHaveMonitoringControl соответственно. </para>

        <code language="C#">
        <![CDATA[
public class SmaStrategy : Strategy, IHaveMonitoringControl, IHaveTestControl
	{
	...
		#region MonitoringControl
		public BaseStudioControl AddMonitorigPanel()
		{
			var usercontrol = new SmaMonitoringControl();
			usercontrol.Init(this);
			return usercontrol;

		}
		#endregion
		#region TestingControl
		public BaseStudioControl AddTestPanel()
		{
			var usercontrol = new SmaTestingControl();
			usercontrol.Init(this);
			return usercontrol;
		}
		#endregion
	...	
	}
		]]>
		</code>
		<para>А также необходимо создать сами панели. Как оздавать собственную панель тестирования или мониторинга описано в пункте <link xlink:href="8cea241f-fdf3-43c7-bf4d-3fdd7dcd0000" />.</para>
		
		<alert class="note">
<para> 	Если для стратегии достаточно панелей тестирования или мониторинга которые 
используются для стратегий по умолчанию, то реализовывать интерфейсы IHaveTestControl и IHaveMonitoringControl не нужно. 
Shell самостоятельно запустит панели тестирования или мониторинга которые используются по умолчанию.
</para>
	</alert>
<mediaLink><image placement="center" xlink:href="Shell_custom_strategy_01"/></mediaLink>
<para>Чтобы созданная стратегия была доступна в окне выбора стратегий ее необходимо добавить в словарь <legacyBold>DictionaryStrategies</legacyBold> главного окна
</para>
        <code language="C#">
        <![CDATA[

	...
	//---------------------------------------------------------------------
	DictionaryStrategies = new ObservableDictionary<Guid, Strategy>
	{
		{ new SmaStrategy().GetTypeId(), new SmaStrategy() },
		{ new StairsTrendStrategy().GetTypeId(), new StairsTrendStrategy() },
		{ new StairsCountertrendStrategy().GetTypeId(), new StairsCountertrendStrategy() }
	};
	//---------------------------------------------------------------------
	...	
		]]>
		</code>
		
<para>Для того чтобы стратегия сохранялась и после этого загружалась, в конструкторе стратегии необходимо установить параметр стратегии</para>
        <code language="C#">
        <![CDATA[
public class SmaStrategy : Strategy, IHaveMonitoringControl, IHaveTestControl
	{
	...
		public SmaStrategy()
		{
         ...
			this.Param("TypeId", GetType().GUID);
         ...
		}
	...	
	}
		]]>
		</code>
<para>Для сохранения дополнительных полей необходимо переопределить методы <legacyBold>Load</legacyBold> и <legacyBold>Save</legacyBold></para>
        <code language="C#">
        <![CDATA[
public class SmaStrategy : Strategy, IHaveMonitoringControl, IHaveTestControl
	{
	...
		#region Load
		public override void Load(SettingsStorage storage)
		{
			base.Load(storage);
			try
			{
				_securityStr = storage.GetValue<string>(nameof(Security));
				_portfolioStr = storage.GetValue<string>(nameof(Portfolio));
				LongSmaLength = storage.GetValue<int>(nameof(LongSmaLength));
				ShortSmaLength = storage.GetValue<int>(nameof(ShortSmaLength));
				Series.CandleType = storage.GetValue(nameof(Series.CandleType), Series.CandleType);
				Series.Arg = storage.GetValue(nameof(Series.Arg), Series.Arg);
			}
			catch (Exception e)
			{
				e.LogError();
			}
		}
		#endregion

		#region Save
		public override void Save(SettingsStorage storage)
		{
			base.Save(storage);
			storage.SetValue(nameof(Security), Security?.Id);
			storage.SetValue(nameof(Portfolio), Portfolio?.Name);
			storage.SetValue(nameof(LongSmaLength), LongSmaLength);
			storage.SetValue(nameof(ShortSmaLength), ShortSmaLength);
			if (Series.CandleType != null)
				storage.SetValue(nameof(Series.CandleType), Series.CandleType.GetTypeName(false));
			if (Series.Arg != null)
				storage.SetValue(nameof(Series.Arg), Series.Arg);
		}
		#endregion
	...	
	}
		]]>
		</code>
</introduction>
<relatedTopics>
<link xlink:href="8cea241f-fdf3-43c7-bf4d-3fdd7dcd0000" />
</relatedTopics>
  </developerConceptualDocument>
</topic>