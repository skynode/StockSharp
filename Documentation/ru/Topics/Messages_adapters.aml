<?xml version="1.0" encoding="utf-8"?>
<topic id="fb79e67d-945c-493d-bdac-85d0040af828" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
       <para>
       Механизм сообщений позволяет создавать собственные подключения к любой внешней торговой системе. Для этого необходимо 
       создать собственный класс <legacyItalic>адаптера сообщений</legacyItalic>, 
       унаследованный от абстрактного класса <codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>.
       </para>
       <para>
       	При разработке собственного адаптера сообщений необходимо решить следующие задачи:
       </para>
       
		<list class="ordered">
  			<listItem>
  				<para>Написать код, преобразующий входящие сообщения <token>stocksharp</token> в команды внешней системы.</para>
  			</listItem>
  			<listItem>
  				<para>Написать код, преобразующий информацию, поступающую от внешней системы, в исходящие сообщения.</para>
  			</listItem>
  			<listItem>
  				<para>Выполнить преобразование кодированной информации внешней системы (коды инструментов и площадок, перечисления и т.п.) в типы <token>stocksharp</token>.</para>
  			</listItem>
  			<listItem>
  				<para>Выполнить дополнительные настройки, связанные с особенностями внешней торговой системы.</para>
  			</listItem>
		</list>
		
       <para>
       	Прежде чем приступить к описанию разработки собственного адаптера, рассмотрим процесс создания и обработки входящих и исходящих сообщений в <token>stocksharp</token>
		на примере сообщения <codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference>. Предположим, что в программе был вызван метод
						<codeEntityReference>M:StockSharp.Algo.Connector.Connect</codeEntityReference>, тогда в базовом классе  
						<codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> будет происходить следующее:
		</para>
		<list class="ordered">
  			<listItem>
  				<para>Вызывается защищенный метод
  				<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnConnect</codeEntityReference>, 
  				в котором создается сообщение и передается в метод
  					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)</codeEntityReference>.</para>
  				<code language="C#">
protected virtual void OnConnect()
{
	SendInMessage(new ConnectMessage());
}
  				</code>
  			</listItem>
  			<listItem>
  			<para>В методе <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.SendInMessage(StockSharp.Messages.Message)</codeEntityReference>
  			сообщение передается в одноименный метод адаптера.</para>
  			<code language="C#">
public void SendInMessage(Message message)
{
	_inAdapter.SendInMessage(message);
}
  			</code>
  			</listItem>
  			<listItem>
  				<para>В методе <codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendInMessage(StockSharp.Messages.Message)</codeEntityReference> адаптера
  					выполняются дополнительные проверки. Если все нормально, то сообщение передается в метод
  					<codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference> (см.ниже).
  					Если сгенерирована ошибка, то создается создается новое исходящее сообщение аналогичного типа, в свойство <codeEntityReference>P:StockSharp.Messages.BaseConnectionMessage.Error</codeEntityReference>
  					сообщения передается объект исключения. Это новое сообщение передается в метод 
  					<codeEntityReference>M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>,
  					в котором будет сгенерировано событие появления нового исходящего сообщения 
  					<codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>,
  					сигнализирующего об ошибке.
  				</para>
  			</listItem>
		</list>
		
		<para>
			Исходящие сообщения создаются при помощи метода 
			<codeEntityReference qualifyHint="true">M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)</codeEntityReference>,
			в который передается объект сообщения. В этом методе генерируется событие нового исходящего сообщения 
			<codeEntityReference>E:StockSharp.Messages.MessageAdapter.NewOutMessage</codeEntityReference>.
			Далее это событие обрабатывается в базовом классе коннектора в защищенном методе
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.OnProcessMessage(StockSharp.Messages.Message)</codeEntityReference>, 
			где в зависимости от ситуации сообщение преобразуется в соответствующий тип <token>stocksharp</token> и генерируется событие коннектора, 
			а также могут создаваться дополнительное входящие сообщения.
		</para>
		
		<para>
		Ниже описан процесс создания собственного адаптера для <token>bitstamp</token> (коннектор доступен с исходными кодами).
		</para>
		
    </introduction>
    
    <procedure>
			<title>Пример создания адаптера сообщений BitStamp</title>
			<steps class="ordered">
			   <step>
					<content>
						<para>
						<legacyBold>Создание класса адаптера.</legacyBold>
						</para>
						<para>
						 Вначале создаем класс адаптера сообщений <legacyBold>BitStampMessageAdapter</legacyBold> унаследованный от
						 абстрактного класса <codeEntityReference>T:StockSharp.Messages.MessageAdapter</codeEntityReference>:
						</para>
						<code language="C#">
public class BitStampMessageAdapter : MessageAdapter 
{
}						
						
</code>
					</content>
				</step>
				<step>
					<content>
						<para>
						<legacyBold>Конструктор адаптера.</legacyBold>
						</para>
						<list class="bullet">
  							<listItem>
  								<para>В конструктор адаптера передается генератор идентификаторов транзакций, который будет использоваться для создания идентификаторов сообщений.</para>
  							</listItem>
  							<listItem>
  								<para>
  								При помощи метода 
  								<codeEntityReference>M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.MessageAdapter,StockSharp.Messages.MessageTypeInfo)</codeEntityReference>
    							добавляем в массив <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference> типы сообщений, 
    							которые будет поддерживать адаптер.
  								</para>
  							</listItem>
						</list>
	
						<code language="C#">
						<![CDATA[
public BitStampMessageAdapter(IdGenerator transactionIdGenerator)
	: base(transactionIdGenerator)
{
	// для поддержания соединения шлем каждый 10 секунд пинг
	HeartbeatInterval = TimeSpan.FromSeconds(10);

	// адаптер поддерживает как транзакции, так и маркет-данные
	this.AddMarketDataSupport();
	this.AddTransactionalSupport();
	
	// удаляем не поддерживаемые типы сообщий (были добавлены через AddTransactionalSupport все возможные транзакционные сообщения)
	this.RemoveSupportedMessage(MessageTypes.Portfolio);
	this.RemoveSupportedMessage(MessageTypes.OrderReplace);

	// адаптер поддерживает тики, стаканы и лог заявок
	this.AddSupportedMarketDataType(DataType.Ticks);
	this.AddSupportedMarketDataType(DataType.MarketDepth);
	//this.AddSupportedMarketDataType(DataType.Level1);
	this.AddSupportedMarketDataType(DataType.OrderLog);

	// адаптер поддерживает результирующие сообщения для поиска инструментов, позиций и заявок
	this.AddSupportedResultMessage(MessageTypes.SecurityLookup);
	this.AddSupportedResultMessage(MessageTypes.PortfolioLookup);
	this.AddSupportedResultMessage(MessageTypes.OrderStatus);
}
						
]]></code>
					</content>
				</step>
				<step>
					<content>
					<para>
					 Метод <codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference>.
					</para>
						<para>
					    Далее необходимо переопределить метод 
					    <codeEntityReference>M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)</codeEntityReference>. 
					    Как говорилось выше, в этот метод передаются все входящие сообщения и для каждого типа сообщения нужно написать код, 
					    преобразующий сообщения в команды <token>bitstamp</token>.
						</para>
						<para>
						При получении сообщения <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Reset</codeEntityReference> 
						необходимо выполнить "обнуление" состояния и освободить ресурсы.
						По завершении этих операций нужно отправить исходящие сообщение <codeEntityReference>T:StockSharp.Messages.ResetMessage</codeEntityReference>.
						</para>
						<para>
						 При поступлении сообщения <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.Connect</codeEntityReference> 
						 инициализируем переменные _httpClient и _pusherClient, подписываемся на события <token>bitstamp</token> и устанавливаем соединение при помощи метода 
						 <legacyBold>Connect</legacyBold> нативного API. В случае удачного соединения должно наступить событие 
						 <legacyBold>SessionOnPusherConnected</legacyBold>.
						</para>

						<code language="C#">
						<![CDATA[
private void SubscribePusherClient()
{
	_pusherClient.Connected += SessionOnPusherConnected;
	_pusherClient.Disconnected += SessionOnPusherDisconnected;
	_pusherClient.Error += SessionOnPusherError;
	_pusherClient.NewOrderBook += SessionOnNewOrderBook;
	_pusherClient.NewOrderLog += SessionOnNewOrderLog;
	_pusherClient.NewTrade += SessionOnNewTrade;
}

private void UnsubscribePusherClient()
{
	_pusherClient.Connected -= SessionOnPusherConnected;
	_pusherClient.Disconnected -= SessionOnPusherDisconnected;
	_pusherClient.Error -= SessionOnPusherError;
	_pusherClient.NewOrderBook -= SessionOnNewOrderBook;
	_pusherClient.NewOrderLog -= SessionOnNewOrderLog;
	_pusherClient.NewTrade -= SessionOnNewTrade;
}
		
protected override bool OnSendInMessage(Message message)
{
    switch (message.Type)
    {
         case MessageTypes.Reset:
         {
         	_lastMyTradeId = 0;
			_lastTimeBalanceCheck = null;

			if (_httpClient != null)
			{
				try
				{
					_httpClient.Dispose();
				}
				catch (Exception ex)
				{
					SendOutError(ex);
				}

				_httpClient = null;
			}

			if (_pusherClient != null)
			{
				try
				{
					UnsubscribePusherClient();
					_pusherClient.Disconnect();
				}
				catch (Exception ex)
				{
					SendOutError(ex);
				}

				_pusherClient = null;
			}

			SendOutMessage(new ResetMessage());

          	break;
        }

        case MessageTypes.Connect:
        {
            if (_httpClient != null)
				throw new InvalidOperationException(LocalizedStrings.Str1619);

			if (_pusherClient != null)
				throw new InvalidOperationException(LocalizedStrings.Str1619);

			_httpClient = new HttpClient(ClientId, Key, Secret, AuthV2) { Parent = this };

			_pusherClient = new PusherClient { Parent = this };
			SubscribePusherClient();
			_pusherClient.Connect();

            break;
        }

        case MessageTypes.Disconnect:
        {
            if (_httpClient == null)
				throw new InvalidOperationException(LocalizedStrings.Str1856);

			if (_pusherClient == null)
				throw new InvalidOperationException(LocalizedStrings.Str1856);

			_httpClient.Dispose();
			_httpClient = null;

			_pusherClient.Disconnect();

            break;
        }
        
        case MessageTypes.PortfolioLookup:
		{
			ProcessPortfolioLookup((PortfolioLookupMessage)message);
			break;
		}

		case MessageTypes.OrderStatus:
		{
			ProcessOrderStatus((OrderStatusMessage)message);
			break;
		}

		case MessageTypes.OrderRegister:
		{
			ProcessOrderRegister((OrderRegisterMessage)message);
			break;
		}

		case MessageTypes.OrderCancel:
		{
			ProcessOrderCancel((OrderCancelMessage)message);
			break;
		}

		case MessageTypes.OrderGroupCancel:
		{
			ProcessOrderGroupCancel((OrderGroupCancelMessage)message);
			break;
		}
				
		case MessageTypes.SecurityLookup:
		{
			ProcessSecurityLookup((SecurityLookupMessage)message);
			break;
		}

		case MessageTypes.MarketData:
		{
			ProcessMarketData((MarketDataMessage)message);
			break;
		}
				
		default:
			return false;
	}

	return true;
}

private void SessionOnPusherConnected()
{
	SendOutMessage(new ConnectMessage());
}

private void SessionOnPusherError(Exception exception)
{
	SendOutError(exception);
}

private void SessionOnPusherDisconnected(bool expected)
{
	SendOutDisconnectMessage(expected);
}
]]>		
						</code>
					</content>
				</step>
				<step>
				<content>
					<para>
					 Событие <legacyBold>SessionOnPusherConnected</legacyBold>.
					</para>
					<para>
					 В обработчике события соединения нативного API необходимо послать исходящее сообщение <codeEntityReference>T:StockSharp.Messages.ConnectMessage</codeEntityReference>.
					 При обработке этого сообщения в коде класса <codeEntityReference>T:StockSharp.Algo.Connector</codeEntityReference> 
					 будут проверены наличие в <codeEntityReference>P:StockSharp.Messages.MessageAdapter.SupportedInMessages</codeEntityReference> следующие типов сообщений:
					 </para>
					<list class="bullet">
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference> для получения портфелей и позиций.
  							</para>
  						</listItem>
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> для получения инструментов.
  							</para>
  						</listItem>
  						<listItem>
  							<para>
  								<codeEntityReference>F:StockSharp.Messages.MessageTypes.OrderStatus</codeEntityReference> - необходимо ли сообщение
  								<codeEntityReference>T:StockSharp.Messages.OrderStatusMessage</codeEntityReference> для получения заявок и собственных сделок.
  							</para>
  						</listItem>
					</list>
					<para>
					 Если типы сообщения установлены у адаптера, то соответствующие сообщения будут посланы. В нашем примере (см. Конструктор адаптера.) в этот список
					 были добавлены типы <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.SecurityLookup</codeEntityReference> и  
					 <codeEntityReference qualifyHint="true">F:StockSharp.Messages.MessageTypes.PortfolioLookup</codeEntityReference>, поэтому
					 следует ожидать получения входящих сообщений <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference> и
					 <codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference>.
					</para>
					<code language="C#">
						<![CDATA[
private void SessionOnPusherConnected()
{
	SendOutMessage(new ConnectMessage());
}
						]]>	
					</code>
				</content>
				</step>
				<step>
				<content>
				<para>
				Входящие сообщения <codeEntityReference>T:StockSharp.Messages.PortfolioLookupMessage</codeEntityReference> и <codeEntityReference>T:StockSharp.Messages.SecurityLookupMessage</codeEntityReference>.
				</para>
				<para>
				При получении этих сообщений необходимо вызвать функции <token>bitstamp</token>, запрашивающие портфели и инструменты соответственно.
				А после получения всех данных необходимо послать сообщение 
				<codeEntityReference>T:StockSharp.Messages.SubscriptionFinishedMessage</codeEntityReference>.
				Обратите внимание, как результирующему сообщению, так и сообщениям с данными, присваивается идентификатор подписки:
				</para>
				<code language="C#">
						<![CDATA[
// Запрашиваем список портфелей
private void ProcessPortfolioLookup(PortfolioLookupMessage message)
{
	if (!message.IsSubscribe)
		return;

	var transactionId = message.TransactionId;

	var pfName = PortfolioName;

	SendOutMessage(new PortfolioMessage
	{
		PortfolioName = pfName,
		BoardCode = Extensions.BitStampBoard,
		OriginalTransactionId = transactionId, // <- идентификатор подписки
	});
	
	var account = _httpClient.GetAccount(section);

	SendOutMessage(new PositionChangeMessage
	{
		SecurityId = SecurityId.Money, // <- для денежной позиции устанавливаем спец код инструмента Money
		PortfolioName = GetPortfolioName(section),
		ServerTime = time,	
	}
	.TryAdd(PositionChangeTypes.Leverage, (decimal?)account.MarginLevel)
	.TryAdd(PositionChangeTypes.CommissionTaker, (decimal?)account.TakerCommissionRate)
	.TryAdd(PositionChangeTypes.CommissionMaker, (decimal?)account.MakerCommissionRate));

	var tuple = _httpClient.GetBalances();

	foreach (var pair in tuple.Item1)
	{
		var currValue = pair.Value.First;
		var currPrice = pair.Value.Second;
		var blockValue = pair.Value.Third;

		if (currValue == null && currPrice == null && blockValue == null)
			continue;

		var msg = this.CreatePositionChangeMessage(pfName, pair.Key.ToUpperInvariant().ToStockSharp(false));

		msg
		.TryAdd(PositionChangeTypes.CurrentValue, currValue, true)
		.TryAdd(PositionChangeTypes.CurrentPrice, currPrice, true)
		.TryAdd(PositionChangeTypes.BlockedValue, blockValue, true);

		SendOutMessage(msg);	
	}
	
	SendSubscriptionResult(message); // <- завершение подписки (если To == null, то тут отправляется что подписка перешла в Online, иначе Finished)
	
	if (message.To == null) // подписка не только на истори, но и на online
		_pusher.SubscribeAccount();
}

// Запрашиваем инструменты
private void ProcessSecurityLookup(SecurityLookupMessage lookupMsg)
{
	var secTypes = lookupMsg.GetSecurityTypes();

	foreach (var info in _httpClient.GetPairsInfo())
	{
		var secMsg = new SecurityMessage
		{
			SecurityId = info.Name.ToStockSharp(),
			SecurityType = info.UrlSymbol == _eurusd ? SecurityTypes.Currency : SecurityTypes.CryptoCurrency,
			MinVolume = info.MinimumOrder.Substring(0, info.MinimumOrder.IndexOf(' ')).To<decimal>(),
			Decimals = info.BaseDecimals,
			Name = info.Description,
			VolumeStep = info.UrlSymbol == _eurusd ? 0.00001m : 0.00000001m,
			OriginalTransactionId = lookupMsg.TransactionId, // <- идентификатор подписки
		};

		if (!secMsg.IsMatch(lookupMsg, secTypes))
			continue;

		SendOutMessage(secMsg);
	}

	SendSubscriptionResult(lookupMsg); // <- завершение подписки
}
						
						]]>	
				</code>
				
				</content>
				</step>
				<step>
				<content>
				<para>
					 Изменение счета или позиции, получаемые от внешней системы.
				</para>
                <para>
					 В обработчике события полученную информацию о портфеле
					 необходимо преобразовать в исходящее сообщение <codeEntityReference>T:StockSharp.Messages.PositionChangeMessage</codeEntityReference>:
				</para>
				<code language="C#">
				<![CDATA[
		private void SessionOnAccountUpdated(AccountUpdate account)
		{
			var time = account.LastAccountUpdate ?? account.EventTime;
			var futData = account.FuturesData;

			if (account.Balances != null)
			{
				foreach (var balance in account.Balances)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(section),
						SecurityId = balance.Asset.InternalCreateSecurityId(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)balance.Free, true)
					.TryAdd(PositionChangeTypes.BlockedValue, (decimal)balance.Locked, true));
				}
			}
			else if (futData != null)
			{
				foreach (var balance in futData.Balances)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(section),
						SecurityId = balance.Asset.InternalCreateSecurityId(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)balance.Balance, true));
				}

				foreach (var position in futData.Positions)
				{
					SendOutMessage(new PositionChangeMessage
					{
						PortfolioName = GetPortfolioName(),
						SecurityId = position.Symbol.ToStockSharp(),
						ServerTime = time,
					}
					.TryAdd(PositionChangeTypes.CurrentValue, (decimal)position.Amount, true)
					.TryAdd(PositionChangeTypes.AveragePrice, (decimal?)position.EntryPrice, true)
					.TryAdd(PositionChangeTypes.RealizedPnL, (decimal?)position.RealizedPnL, true)
					.TryAdd(PositionChangeTypes.UnrealizedPnL, (decimal?)position.UnrealizedPnL, true)
					);
				}
			}
		}]]>	
				</code>
				</content>
				</step>
				
				<step>
				<content>
				<para>
				 <legacyBold>Подписка на тиковые данные.</legacyBold>
				</para>
				<para>
				 При вызове методов 
<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.Subscribe(StockSharp.Algo.Subscription)</codeEntityReference> 
или <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Connector.UnSubscribe(StockSharp.Algo.Subscription)</codeEntityReference> 
будет сформировано входящее сообщение 
<codeEntityReference>T:StockSharp.Messages.MarketDataMessage</codeEntityReference>
.
				 </para>
				 <para>
				 При обработке этого сообщения необходимо вызвать методы <token>bitstamp</token> по подписке или отписке получения тиковых сделок.
				 </para>
				 <para>
				 Так как сообщение используется для работы со всеми типами рыночных данных, то для вычленения конкретного типа нужно использовать свойство 
				 <codeEntityReference>P:StockSharp.Messages.MarketDataMessage.DataType2</codeEntityReference>. Для сделок значение этого свойства равно
				 <codeEntityReference qualifyHint="true">P:StockSharp.Messages.DataType.Ticks</codeEntityReference>.
				</para>
				<para>
				  После вызова метода <legacyBold>SubscribeTrades</legacyBold> сделки будут поступать в событии <legacyBold>SessionOnNewTrade</legacyBold>.
				 </para>
				
				<code language="C#">
                <![CDATA[
		private void ProcessMarketData(MarketDataMessage mdMsg)
		{
			if (!mdMsg.SecurityId.IsAssociated())
			{
				SendSubscriptionNotSupported(mdMsg.TransactionId);
				return;
			}

			var currency = mdMsg.SecurityId.ToCurrency();

			if (mdMsg.DataType2 == DataType.OrderLog)
			{
				if (mdMsg.IsSubscribe)
					_pusherClient.SubscribeOrderLog(currency);
				else
					_pusherClient.UnSubscribeOrderLog(currency);
			}
			else if (mdMsg.DataType2 == DataType.MarketDepth)
			{
				if (mdMsg.IsSubscribe)
					_pusherClient.SubscribeOrderBook(currency);
				else
					_pusherClient.UnSubscribeOrderBook(currency);
			}
			else if (mdMsg.DataType2 == DataType.Ticks)
			{
				if (mdMsg.IsSubscribe)
				{
					if (mdMsg.To != null)
					{
						SendSubscriptionReply(mdMsg.TransactionId);

						var diff = DateTimeOffset.Now - (mdMsg.From ?? DateTime.Today);

						string interval;

						if (diff.TotalMinutes < 1)
							interval = "minute";
						else if (diff.TotalDays < 1)
							interval = "hour";
						else
							interval = "day";

						var trades = _httpClient.RequestTransactions(currency, interval);

						foreach (var trade in trades.OrderBy(t => t.Time))
						{
							SendOutMessage(new ExecutionMessage
							{
								ExecutionType = ExecutionTypes.Tick,
								SecurityId = mdMsg.SecurityId,
								TradeId = trade.Id,
								TradePrice = (decimal)trade.Price,
								TradeVolume = trade.Amount.ToDecimal(),
								ServerTime = trade.Time,
								OriginSide = trade.Type.ToSide(),
								OriginalTransactionId = mdMsg.TransactionId
							});
						}

						SendSubscriptionResult(mdMsg);
						return;
					}
					else
						_pusherClient.SubscribeTrades(currency);
				}
				else
				{
					_pusherClient.UnSubscribeTrades(currency);
				}
			}
			else
			{
				SendSubscriptionNotSupported(mdMsg.TransactionId);
				return;
			}

			SendSubscriptionReply(mdMsg.TransactionId);
		}
				
]]>
				</code>
			</content>
			</step>
			<step>
				<content>
				<para>
					Событие <legacyBold>SessionOnNewTrade</legacyBold>.
				</para>
				<para>
				В обработчике события <legacyBold>SessionOnNewTrade</legacyBold> полученную информацию о сделке 
				необходимо преобразовать во исходящее сообщение <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference>.
				Обратите внимание, что сообщения <codeEntityReference>T:StockSharp.Messages.ExecutionMessage</codeEntityReference> используются как для сделок (собственных или анонимных), так и для заявок. 
  				Поэтому в сообщении уточняется, что оно относится к сделке - 
  				<codeEntityReference>P:StockSharp.Messages.ExecutionMessage.ExecutionType</codeEntityReference> = 
  				<codeEntityReference qualifyHint="true">F:StockSharp.Messages.ExecutionTypes.Tick</codeEntityReference>.
				</para>
				<code language="C#">
				<![CDATA[
private void SessionOnNewTrade(string pair, Trade trade)
{
	SendOutMessage(new ExecutionMessage
	{
		ExecutionType = ExecutionTypes.Tick,
		SecurityId = pair.ToStockSharp(),
		TradeId = trade.Id,
		TradePrice = (decimal)trade.Price,
		TradeVolume = (decimal)trade.Amount,
		ServerTime = trade.Time,
		OriginSide = trade.Type.ToSide(),
	});
}


		  ]]>	
			   </code>
			</content>
				</step>
				<step>
					<content>
						<para>
						 Код работы с заявками (отмена-регистрация), как и полный код адаптера, можно получить в репозитарии <token>stocksharpgithub</token>.
						</para>
					</content>
				</step>
			</steps>
		</procedure>
    
  </developerConceptualDocument>
</topic>



